<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on Nel retrobottega</title><link>https://blog.nelretrobottega.xyz/tags/go/</link><description>Recent content in go on Nel retrobottega</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 24 Jan 2024 11:41:06 +0100</lastBuildDate><atom:link href="https://blog.nelretrobottega.xyz/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>How I structure big Go web projects</title><link>https://blog.nelretrobottega.xyz/posts/golang/how-structure-big-projects/</link><pubDate>Wed, 24 Jan 2024 11:41:06 +0100</pubDate><guid>https://blog.nelretrobottega.xyz/posts/golang/how-structure-big-projects/</guid><description>It&amp;rsquo;s the 1 million dollars question: &amp;ldquo;what&amp;rsquo;s the best way to structure your Go web project?&amp;rdquo;.
There&amp;rsquo;s none.
But you can adapt one to your needs. One way I found working for me it&amp;rsquo;s the following: a domain-ish driven architecture with a modular approach.
The main star here is fx by Uber.
What&amp;rsquo;s fx? Fx is A dependency injection based application framework for Go. according to fx&amp;rsquo;s GitHub page.
It can helps you divide your project in modules and dependecies in providers and manage theirs entire life cylcles.</description></item><item><title>Concurrent thumbnail generator</title><link>https://blog.nelretrobottega.xyz/posts/golang/thumbnail-generator/</link><pubDate>Sun, 08 Jan 2023 22:01:28 +0100</pubDate><guid>https://blog.nelretrobottega.xyz/posts/golang/thumbnail-generator/</guid><description>Image by Markus Spiske
Preface This article is part of the series regarding Fuu a simple self-hosted photo viewer.
The aim of this module is design a structure that from a list of folders generates a thumbnail (of the first file) for each folder. By leveraging the concurrent nature of Go it&amp;rsquo;s easy to efficiently use all the CPU power of our machine. By efficiently use I mean using each core for a thread of execution.</description></item><item><title>Embed your single page app in Golang</title><link>https://blog.nelretrobottega.xyz/posts/golang/serve-spa-reviwed/</link><pubDate>Mon, 02 Jan 2023 23:16:08 +0100</pubDate><guid>https://blog.nelretrobottega.xyz/posts/golang/serve-spa-reviwed/</guid><description>Image by Tim ZÃ¤nkert
Continuum of this article.
Preface As mentioned in the previous version of this article, I love the idea of having a nice modern ui embedded in a single binary. It&amp;rsquo;s clean, elegant and saves a lot of time when deploying the applcation.
This time i built a simple gallery viewe named Fuu.
Application Structure FS &amp;lt;&amp;ndash;&amp;gt; Golang Fileserver &amp;lt;&amp;ndash; Browsing API &amp;lt;&amp;ndash;&amp;gt; React App
Fileserver exposes static resources (photos) Background process that generates thumbnails HTTP Methos to retrieve the directory structure React App for viewing photos grouped by directory Embed React App Golang http package exposes the http.</description></item><item><title>Embed your single page app in Gin</title><link>https://blog.nelretrobottega.xyz/posts/golang/serve-spa/</link><pubDate>Fri, 23 Sep 2022 11:39:07 +0200</pubDate><guid>https://blog.nelretrobottega.xyz/posts/golang/serve-spa/</guid><description>Preface One of the many features about Go that fascinates me is the ability of embedding resource into a single binary. I tought that shipping a product/project without the necessity of installers, upackers, etc&amp;hellip; it&amp;rsquo;s an elegant and efficient way to do. Just download it, put it in a PATH folder and run it.
Recently I developed an application to show in real-time OTPs messages sent to an android phone. I wanted to build something that have a minimal impact on the machine, cross-platform and able to handle many connections simultaneusly.</description></item></channel></rss>